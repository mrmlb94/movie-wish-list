<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.5.5</version>
		<relativePath/>
	</parent>
	<groupId>com.example</groupId>
	<artifactId>movie-wish-list</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>movie-wish-list</name>
	<description>Movie wish list project for Spring Boot</description>

	<properties>
		<java.version>17</java.version>

		<!-- Test configuration -->
		<skip.unit-tests>false</skip.unit-tests>
		<skip.integration-tests>false</skip.integration-tests>

		<!-- Environment URLs -->
		<e2e.health.url>http://localhost:8080/actuator/health</e2e.health.url>
		<it.mongo.uri>mongodb://localhost:27018/movies_it</it.mongo.uri>
		<e2e.mongo.uri>mongodb://localhost:27018/movies_e2e</e2e.mongo.uri>
		<server.port>8080</server.port>

		<!-- Plugin versions (only for plugins not managed by Spring Boot) -->
		<exec-maven-plugin.version>3.5.1</exec-maven-plugin.version>
		<webdrivermanager.version>6.2.0</webdrivermanager.version>
	</properties>

	<dependencies>
		<!-- Spring Boot Starters -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>

		<!-- Runtime Dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>


		<!-- Test Dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-testcontainers</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- TestContainers -->
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>mongodb</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- REST Testing -->
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>rest-assured</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>json-path</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.rest-assured</groupId>
			<artifactId>xml-path</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Selenium Testing -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>io.github.bonigarcia</groupId>
			<artifactId>webdrivermanager</artifactId>
			<version>${webdrivermanager.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- Spring Boot Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Docker Compose Integration -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec-maven-plugin.version}</version>
				<executions>
					<!-- Compose UP -->
					<execution>
						<id>compose-up</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>docker</executable>
							<arguments>
								<argument>compose</argument>
								<argument>-f</argument>
								<argument>${project.basedir}/docker-compose.yml</argument>
								<argument>up</argument>
								<argument>-d</argument>
								<argument>--wait</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Health Check with timeout -->
					<execution>
						<id>wait-backend-health</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<arguments>
								<argument>-c</argument>
								<argument>
									for i in {1..60}; do
									if curl -f ${e2e.health.url} | grep -q '"status":"UP"'; then
									echo "Backend is healthy"; exit 0;
									fi;
									echo "Waiting for backend... ($i/60)"; sleep 2;
									done;
									echo "Backend health check failed"; exit 1;
								</argument>
							</arguments>
						</configuration>
					</execution>

					<!-- Compose DOWN -->
					<execution>
						<id>compose-down</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>docker</executable>
							<arguments>
								<argument>compose</argument>
								<argument>-f</argument>
								<argument>${project.basedir}/docker-compose.yml</argument>
								<argument>down</argument>
								<argument>-v</argument>
								<argument>--remove-orphans</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Unit Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skipTests>${skip.unit-tests}</skipTests>
					<includes>
						<include>**/*Test.java</include>
						<include>**/*Tests.java</include>
					</includes>
					<excludes>
						<exclude>**/*IT.java</exclude>
						<exclude>**/*ITCase.java</exclude>
						<exclude>**/*E2E.java</exclude>
						<exclude>**/*E2ETest.java</exclude>
					</excludes>
					<systemPropertyVariables>
						<spring.profiles.active>test</spring.profiles.active>
						<java.awt.headless>true</java.awt.headless>
					</systemPropertyVariables>
				</configuration>
			</plugin>

			<!-- Integration & E2E Tests -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
					<!-- Integration Tests -->
					<execution>
						<id>integration-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration-tests}</skipTests>
							<includes>
								<include>**/*IT.java</include>
								<include>**/*ITCase.java</include>
							</includes>
							<systemPropertyVariables>
								<spring.data.mongodb.uri>${it.mongo.uri}</spring.data.mongodb.uri>
								<java.awt.headless>true</java.awt.headless>
							</systemPropertyVariables>
						</configuration>
					</execution>

					<!-- E2E Tests -->
					<execution>
						<id>e2e-tests</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
						<configuration>
							<skipTests>${skip.integration-tests}</skipTests>
							<includes>
								<include>**/*E2E.java</include>
								<include>**/*E2ETest.java</include>
							</includes>
							<systemPropertyVariables>
								<baseUrl>http://localhost:${server.port}</baseUrl>
								<server.port>${server.port}</server.port>
								<spring.data.mongodb.uri>${e2e.mongo.uri}</spring.data.mongodb.uri>
								<java.awt.headless>true</java.awt.headless>
							</systemPropertyVariables>
						</configuration>
					</execution>

					<!-- Verify Results -->
					<execution>
						<id>verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- CI Profile for faster builds -->
		<profile>
			<id>ci</id>
			<properties>
				<skip.integration-tests>true</skip.integration-tests>
			</properties>
		</profile>

		<!-- Quick Profile - only unit tests -->
		<profile>
			<id>quick</id>
			<properties>
				<skip.integration-tests>true</skip.integration-tests>
			</properties>
		</profile>
	</profiles>
</project>